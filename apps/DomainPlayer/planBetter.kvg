## Syntactic keywords
Keyword Terminate
#Rule

#PREDICATES
grabbed
grabbable
connected
connectable
freeToBind
freeToBeBound
freeToBeUnbound
isTool
isBase

#OBJECTS
Constant Base
Constant T1
Constant T2
Constant T3

## initial state
START_STATE{
  (isBase Base)
  (isTool T1)
  (isTool T2)
  (isTool T3)
  (grabbable T1)
#  (grabbable T2)
#  (grabbable T3)
#  (connectable T1)
#  (connectable T2)
#  (connectable T3)
  (freeToBind Base)
  (freeToBeBound T1)
  (freeToBeBound T2)
  (freeToBeBound T3)
}

terminal{ (grabbed T3) }

#RULES - always grab/connect X with Y

#Grab X with base Y
DecisionRule grab {
     X, Y
     { (isTool X) (isBase Y) (freeToBeBound X) (grabbable X) (freeToBind Y) }
     { (freeToBeUnbound X) (freeToBind X) (grabbed X) (freeToBeBound X)! (freeToBind Y)! }
}

#Let go X with base Y
DecisionRule letGo {
     X, Y
     { (isTool X) (isBase Y) (freeToBeUnbound X) (grabbed X) }
     { (grabbed X)! (freeToBeUnbound X)! (freeToBeBound X) (freeToBind Y) (freeToBind X)! }
}

#Connect X with Y
DecisionRule connect {
     X, Y
     { (isTool X) (isTool Y) (freeToBeBound X) (freeToBind Y) (connectable X) }
     { (freeToBeUnbound X) (freeToBeBound X)! (connected X Y) (freeToBind X) }
}

#Disconnect X from Y
DecisionRule disconnect {
     X, Y
     { (isTool X) (isTool Y) (freeToBeUnbound X) (connected X Y) }
     { (freeToBeBound X) (freeToBeUnbound Y) (connected X Y)! (freeToBind X)!}
}

#letGo and disconnect are only possible for single components. This could be altered - a tangle of tools might stay that way on letting it go - but the logic would seem to be rather comlicated. Some connections (push) intuitively disconnect, some (drag) don't; Moreover, grabbing a different part than before changes the sequence of connects.

Rule {
     X, Y
     { (connected X Y) }
     { (freeToBeUnbound Y)! }
}

Rule {
     X
     { (grabbable X) }
     { (connectable X) }
}

#Remove bound obstacle X to make Y connectable - simplified in that we can make any Y connectable by removing any X
DecisionRule boundObstacleMakeConnectable {
     X, Y
     { (isTool X) (isTool Y) (freeToBeBound X)! (connectable Y)! } #(freeToBeBound Y)
     { (connectable Y) }
}

#Remove bound obstacle X to make Y grabbable - simplified in that we can make any Y grabbable by removing any X
DecisionRule boundObstacleMakeGrabbable {
     X, Y
     { (isTool X) (isTool Y) (freeToBeBound X)! (freeToBeBound Y) (grabbable Y)! } #
     { (grabbable Y) }
}

#Move connected X to make it grabbable - simplified in that we can make any X grabbable as soon as it is connected somehow
DecisionRule boundToolMakeGrabbable {
     X
     { (isTool X) (freeToBeBound X)! (grabbable X)! }
     { (grabbable X) }
}
